User:
    listeners: [IndexListener, NotificationListener]
    
    columns:
        createdTs: timestamp
        modifiedTs: timestamp
    
        username: 
            type: string(255)
            unique: true
            extra:
                logicalName: User Name
                searchIndex: unstored
                notify: true
            comment: This users unique authentication credential
        password: 
            type: string(255)
            extra: 
                logicalName: Password
                notify: true
        passwordSalt:
            type: string(10)
            fixed: true
            comment: A randomly generated salt, used to discourage rainbow table attacks against the password database
        passwordTs: timestamp
        passwordHistory: string
        hashType:
            type: enum
            values: [md5, sha1, sha224, sha256, sha384, sha512]
        lastRob: 
            type: timestamp
            comment: The last time this user digitally accepted the Rules of Behavior
        
        locked: 
            type: boolean
            default: false
            extra:
                notify: true
        lockTs: timestamp
        lockType: 
            type: enum
            values: [manual, password, inactive, expired]
            comment: Manual lock means the admin locked the account. Password lock means several consecutive password failures. Inactive lock means the user has not logged in recently enough. Expired locked means the password has expired.
        failureCount: 
            type: integer
            default: 0
            comment: How many times the user entered the wrong password before successfully logging in
    
        lastLoginIp:
            type: string(15)
            Fisma_Validator_Ip: true
        lastLoginTs: timestamp
    
        title: 
            type: string(255)
            extra:
                logicalName: Title
                searchIndex: unstored
                notify: true
            comment: The users position or title within the agency
        nameFirst: 
            type: string(255)
            extra:
                logicalName: First Name
                searchIndex: unstored
                notify: true
            comment: The users first name
        nameLast: 
            type: string(255)
            extra:
                logicalName: Last Name
                searchIndex: unstored
                notify: true
            comment: The users last name
        email: 
            type: string(255)
            extra:
                logicalName: E-mail Address
                searchIndex: unstored
                notify: true
            email: 
                check_mx: false
            comment: The users primary e-mail address
        emailValidate: 
            type: boolean
            default: false
            comment: Whether the user has validated their e-mail address
        phoneOffice: 
            type: string(10)
            fixed: true
            extra:
                logicalName: Office Phone
                searchIndex: keyword
                notify: true
            comment: U.S. 10 digit phone number; stored without punctuation
        phoneMobile:
            type: string(10)
            fixed: true
            extra:
                logicalName: Mobile Phone
                searchIndex: keyword
                notify: true
            comment: U.S. 10 digit phone number, stored as 10 digits without punctuation
        searchColumnsPref:
            type: integer
            comment: A bitmask corresponding to visible columns on the search page
    
        notifyFrequency: integer
        mostRecentNotifyTs: timestamp
        notifyEmail:
            type: string(255)
            
    relations:
        # Roles is a many-to-many relation
        Roles:
            class: Role
            local: userId
            foreign: roleId
            refClass: UserRole

        # Organizations is a many-to-many relation
        Organizations:
            class: Organization
            local: userId
            foreign: organizationId
            refClass: UserOrganization
        
        # Events is a many-to-many relation
        Events:
            class: Event
            local: userId
            foreign: eventId
            refClass: UserEvent

    actAs:
        SoftDelete:
        Timestampable:
            created:
                name: createdTs
                type: timestamp
            updated:
                name: modifiedTs
                type: timestamp
        Fisma_Behavior_AuditLoggable:
            logCreateObject: true
            logUpdateObject: true
            logDeleteObject: true
