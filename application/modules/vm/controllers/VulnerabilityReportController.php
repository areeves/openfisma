<?php
/**
 * Copyright (c) 2010 Endeavor Systems, Inc.
 *
 * This file is part of OpenFISMA.
 *
 * OpenFISMA is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
 * License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * OpenFISMA is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with OpenFISMA.  If not, see
 * {@link http://www.gnu.org/licenses/}.
 */

/**
 * Various vulnerability reports
 *
 * @author     Andrew Reeves <andrew.reeves@endeavorsystems.com>
 * @copyright  (c) Endeavor Systems, Inc. 2010 {@link http://www.endeavorsystems.com}
 * @license    http://www.openfisma.org/content/license GPLv3
 * @package    Controller
 */
class Vm_VulnerabilityReportController extends Fisma_Zend_Controller_Action_Security
{
    /**
     * Initialize the controller
     */
    public function init()
    {
        $this->_helper->reportContextSwitch()
                      ->addActionContext('risk', array('html', 'pdf', 'xls'))
                      ->addActionContext('reopened', array('html', 'pdf', 'xls'))
                      ->addActionContext('vulnerable-service', array('html', 'pdf', 'xls'))
                      ->initContext();

        parent::init();
    }

    /**
     * Check that the user has the privilege to run reports
     */
    public function preDispatch()
    {
        parent::preDispatch();

        $module = Doctrine::getTable('Module')->findOneByName('Vulnerability Management');

        if (!$module->enabled) {
            throw new Fisma_Zend_Exception('This module is not enabled.');
        }

        $this->_acl->requireArea('vulnerability_report');
    }

    /**
     * Report aggregated risk
     *
     * @return void
     */
    public function riskAction()
    {
        $report = new Fisma_Report();
        $report->setTitle('Aggregated Risk Report');

        $query = CurrentUser::getInstance()->getOrganizationsByPrivilegeQuery('organization', 'read')
            ->select('bureau.name AS name');
        $report->addColumn(new Fisma_Report_Column('Bureau', true));

        $query->addSelect('o.name AS name');
        $report->addColumn(new Fisma_Report_Column('System', true));

        $query->addSelect("SUM(IF(v.status = 'OPEN', v.cvssbasescore, 0)) AS OpenSum");
        $report->addColumn(new Fisma_Report_Column('Open', true, null, null, false, 'number'));

        $query->addSelect("SUM(IF(v.status = 'WONTFIX', v.cvssbasescore, 0)) AS WontFixSum");
        $report->addColumn(new Fisma_Report_Column("Won't Fix", true, null, null, false, 'number'));

        $query->addSelect("SUM(IF(v.status = 'FIXED', v.cvssbasescore, 0)) AS FixedSum");
        $report->addColumn(new Fisma_Report_Column('Fixed', true, null, null, false, 'number'));

        $query->leftJoin('o.Assets a')
            ->leftJoin('a.Vulnerabilities v')
            ->leftJoin('o.System s')
            ->leftJoin('Organization bureau')
            ->andWhere('bureau.orgType = ?', 'bureau')
            ->andWhere('o.orgType = ?', 'system')
            ->andWhere('o.lft BETWEEN bureau.lft AND bureau.rgt')
            ->andWhere('s.sdlcPhase <> ?', 'disposal')
            ->groupBy('bureau.id, o.id')
            ->orderBy('bureau.name, o.name')
            ->setHydrationMode(Doctrine::HYDRATE_SCALAR);

        $result = $query->execute();
        $report->setData($result);
        $this->_helper->reportContextSwitch()->setReport($report);
    }

    /**
     * Report re-opened vulnerabilities
     *
     * @return void
     */
    public function reopenedAction()
    {
        $report = new Fisma_Report();
        $report->setTitle('Reopened Vulnerabilities Report');

        $query = Doctrine_Query::create()
            ->select('n.name');
        $report->addColumn(new Fisma_Report_Column('Network', true));

        $query->addSelect('a.name');
        $report->addColumn(new Fisma_Report_Column('Asset', true));

        $query->addSelect('a.addressIp');
        $report->addColumn(new Fisma_Report_Column('IP Address', true));

        $query->addSelect('a.addressPort');
        $report->addColumn(new Fisma_Report_Column('Port', true, null, null, false, 'number'));

        $condition = "vu.action = 'REOPEN' AND DATEDIFF(u.createdTs, NOW()) BETWEEN %d AND %d";
        $format = 'SUM(IF(' . $condition . ', 1, 0)) AS %s';
        foreach (array(30, 60, 90, 120) as $p) {
            $query->addSelect(sprintf($format, $p - 30, $p - 1, "cnt$p"));
            $report->addColumn(new Fisma_Report_Column($p . ' Days', true, null, null, false, 'number'));
        }

        $query->from('Network n')
            ->leftJoin('n.Assets a')
            ->leftJoin('a.Vulnerabilities v')
            ->leftJoin('v.VulnerabilityUploads vu')
            ->leftJoin('vu.Upload u')
            ->groupBy('n.id, a.id')
            ->setHydrationMode(Doctrine::HYDRATE_SCALAR);

        $result = $query->execute();
        $report->setData($result);
        $this->_helper->reportContextSwitch()->setReport($report);
    }

    /**
     * Summary of OPEN, FIXED, and WONTFIX vulnerabilities
     *
     * @return void
     */
    public function vulnerableServiceAction()
    {
        $report = new Fisma_Report();
        $report->setTitle('Vulnerable Service Report');

        $query = Doctrine_Query::create()
            ->select('n.name');
        $report->addColumn(new Fisma_Report_Column('Network', true));

        $query->addSelect('a.name');
        $report->addColumn(new Fisma_Report_Column('Asset', true));

        $query->addSelect('a.addressIp');
        $report->addColumn(new Fisma_Report_Column('IP Address', true, null, null, false));

        $query->addSelect('a.addressPort');
        $report->addColumn(new Fisma_Report_Column('Port', true, null, null, false, 'number'));

        $format = "SUM(IF(v.status = '%s', 1, 0)) AS %s";
        foreach (array('OPEN', 'FIXED', 'WONTFIX') as $p) {
            $query->addSelect(sprintf($format, $p, "cnt$p"));
            $report->addColumn(new Fisma_Report_Column($p, true, null, null, false, 'number'));
        }

        $query->from('Network n')
            ->leftJoin('n.Assets a')
            ->leftJoin('a.Vulnerabilities v')
            ->groupBy('n.id, a.id')
            ->setHydrationMode(Doctrine::HYDRATE_SCALAR);

        $result = $query->execute();
        $report->setData($result);
        $this->_helper->reportContextSwitch()->setReport($report);
    }
}

