<div id="<?php echo $this->escape($this->containerId, 'javascript'); ?>"></div>

<script type="text/javascript">
    YAHOO.util.Event.onContentReady("<?php echo $this->escape($this->containerId, 'javascript'); ?>", function() {

        var columnDefs = <?php echo $this->escape($this->columnDefinitions, 'json'); ?>;

        /* 
         * Column definitions are defined in JSON, which cannot embed object references such as formatters. So 
         * loop over the definitions and convert any names of formatters into references to those actual objects.
         */
        for (index in columnDefs) {
            var columnDef = columnDefs[index];
            
            if (columnDef['formatter']) {
                columnDef['formatter'] = Fisma.Util.getObjectFromName(columnDef['formatter']);
            }
        }

        // A function which constructs POST requests for this data table
        var requestConstructor;

        <?php if (isset($this->requestConstructor)): ?>
            var requestConstructorName = "<?php echo $this->escape($this->requestConstructor); ?>";
            requestConstructor = Fisma.Util.getObjectFromName(requestConstructorName);
        <?php else: ?>
            requestConstructor = function (tableState, self) {    
                // Build custom request
                var request = "/sort/" + tableState.sortedBy.key +
                              "/dir/" + (tableState.sortedBy.dir == 'yui-dt-asc' ? 'asc' : 'desc') + 
                              "/start/" + tableState.pagination.recordOffset +
                              "/count/" + tableState.pagination.rowsPerPage;

                return request;
            };
        <?php endif; ?>

        // DataSource instance
        var dataSource = new YAHOO.util.XHRDataSource('<?php echo $this->escape($this->dataUrl); ?>');
        dataSource.connMethodPost = false;
        dataSource.responseType = YAHOO.util.DataSource.TYPE_JSON;
        dataSource.responseSchema = {
            resultsList : "<?php echo $this->escape($this->resultVariable, 'javascript'); ?>",
            metaFields : { 
                totalRecords : "totalRecords"
            }
        };

        // DataTable configuration
        var tableConfiguration = {
            initialLoad : <?php echo $this->escape($this->deferData ? 'false' : 'true'); ?>,
            initialRequest : "/sort/<?php echo $this->escape($this->initialSortColumn, 'javascript'); ?>"
                           + "/dir/<?php echo $this->escape($this->sortDirection, 'javascript'); ?>"
                           + "/count/<?php echo $this->escape($this->rowCount, 'javascript'); ?>",
            dynamicData : true, 
            sortedBy : {
                key : "<?php echo $this->escape($this->initialSortColumn, 'javascript'); ?>", 
                dir : "<?php echo $this->escape($this->sortDirection, 'javascript'); ?>"
            },
            paginator: new YAHOO.widget.Paginator(
                {
                    rowsPerPage : <?php echo $this->escape($this->rowCount, 'javascript'); ?>,
                    template : "{FirstPageLink} {PreviousPageLink} {PageLinks} {NextPageLink} {LastPageLink}"
                }
            ), 
            generateRequest : requestConstructor
        };

        // The actual DataTable instance
        var dataTable = new YAHOO.widget.DataTable(
            "<?php echo $this->escape($this->containerId, 'javascript'); ?>", 
            columnDefs, 
            dataSource, 
            tableConfiguration
        );
        
        // Update number of returned records
        dataTable.handleDataReturnPayload = function(request, response, payload) { 
            payload.totalRecords = response.meta.totalRecords; 

            // Display total records in the search results header
            var searchResultsHeader = document.getElementById('searchResultsTotalFound');
            if (searchResultsHeader) {
                var totalRecords = response.meta.totalRecords ? response.meta.totalRecords : 0;
                var searchResultsTotalFound = document.createTextNode('(' + totalRecords + ' records found)');
                
                if (searchResultsHeader.firstChild) {
                    searchResultsHeader.removeChild(searchResultsHeader.firstChild);
                }
                
                searchResultsHeader.appendChild(searchResultsTotalFound);
            }

            return payload; 
        }
        
        // Enable row highlighting for mouse over events
        dataTable.subscribe("rowMouseoverEvent", dataTable.onEventHighlightRow); 
        dataTable.subscribe("rowMouseoutEvent", dataTable.onEventUnhighlightRow);

        // Enable cell click event handler
        dataTable.subscribe("cellClickEvent", function (clickEvent) {
            var targetEl = clickEvent.target;
            var rowData = this.getRecord(targetEl);

            // Reject clicks in columns that contain checkboxes (that would be cruel for the user)
            var column = this.getColumn(targetEl);
            if (column.formatter == Fisma.TableFormat.formatCheckbox) {
                return;
            }
            
            // Reject clicks for deleted records
            if (rowData.getData('deleted_at')) {
                var message = 'This record cannot be viewed because it was deleted.';
                Fisma.Util.showAlertDialog(message);
                return;
            }
            
            var url = "<?php echo $this->escape($this->clickEventBaseUrl, 'javascript');?>"
                    + escape(rowData._oData['<?php echo $this->escape($this->clickEventVariableName); ?>']);

            // A shift+click pops up a new window for the record view
            if (clickEvent.event.shiftKey) {
                var popup = window.open(url);
                
                // A shift+alt+click will pop under a new window for the record view
                if (clickEvent.event.altKey) {
                    popup.blur();
                    window.focus();
                }
            } else {
                document.location = url;
            }                    
        });
        
        <?php if (isset($this->renderEventFunction)): ?>
            var renderEventFunctionName = "<?php echo $this->escape($this->renderEventFunction); ?>";
            var renderEventFunction = Fisma.Util.getObjectFromName(renderEventFunctionName);

            dataTable.subscribe("renderEvent", renderEventFunction);
        <?php endif; ?>
        
        // Set up thead click events for columns which contain checkboxes
        dataTable.subscribe("theadCellClickEvent", function (clickEvent) {
            var column = this.getColumn(clickEvent.target);
            
            if (column.formatter == Fisma.TableFormat.formatCheckbox) {
                var theadCheckbox = YAHOO.util.Dom.get('dt-checkbox');
                
                // Load records for the current page
                var paginator = dataTable.getState().pagination.paginator;
                var startRecord = (paginator.getCurrentPage() - 1) * paginator.getRowsPerPage();
                var records = this.getRecordSet().getRecords(startRecord);

                for (var i = 0; i < records.length; i++) {
                    if (records[i].getData('deleted_at')) {
                        continue;
                    }

                    if (theadCheckbox.checked) {
                        this.selectRow(records[i]);
                    } else {
                        this.unselectRow(records[i]);
                    }
                    
                    this.getRecordSet().updateRecordValue(records[i], column.key, theadCheckbox.checked);
                }
                
                this.render();
            }
        });
        
        // Highlight/unhighlight rows in response to checkbox clicks
        dataTable.subscribe("checkboxClickEvent", function (clickEvent) {
            var target = clickEvent.target;
            var checked = target.checked;
            var record = this.getRecord(target);
            
            this.getRecordSet().updateRecordValue(record, 'checked', checked);
            
            if (checked) {
                this.selectRow(record);
            } else {
                this.unselectRow(record);
            }
        });
        
        // Make sure that the header checkbox is unchecked on page changes
        dataTable.get("paginator").subscribe("pageChange", function (event) {
            var checkbox = YAHOO.util.Dom.get('dt-checkbox');
            
            checkbox.checked = false;
        });
    });
</script>
