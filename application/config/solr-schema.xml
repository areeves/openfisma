<?xml version="1.0" encoding="UTF-8"?>
<!--
Default Solr schema file for OpenFISMA.

Symlink your Solr installation's schema.xml to this file.

See http://manual.openfisma.org/display/ADMIN/Administrator+Manual
-->
<schema name="openfisma" version="1.0">
    <types>
        <!--
        Built in types for Solr
        -->
        <fieldType name="string" class="solr.StrField" sortMissingLast="true" omitNorms="true"/>
        <fieldType name="boolean" class="solr.BoolField" sortMissingLast="true" omitNorms="true"/>
        <fieldType name="integer" class="solr.IntField" omitNorms="true"/>
        <fieldType name="long" class="solr.LongField" omitNorms="true"/>
        <fieldType name="float" class="solr.FloatField" omitNorms="true"/>
        <fieldType name="double" class="solr.DoubleField" omitNorms="true"/>
        <fieldType name="sint" class="solr.SortableIntField" sortMissingLast="true" omitNorms="true"/>
        <fieldType name="slong" class="solr.SortableLongField" sortMissingLast="true" omitNorms="true"/>
        <fieldType name="sfloat" class="solr.SortableFloatField" sortMissingLast="true" omitNorms="true"/>
        <fieldType name="sdouble" class="solr.SortableDoubleField" sortMissingLast="true" omitNorms="true"/>
        <fieldType name="date" class="solr.DateField" sortMissingLast="true" omitNorms="true"/>

        <!--
    	A text field that uses WordDelimiterFilter to enable splitting and matching of
    	words on case-change, alpha numeric boundaries, and non-alphanumeric chars,
    	so that a query of "wifi" or "wi fi" could match a document containing "Wi-Fi".
    	Synonyms and stopwords are customized by external files, and stemming is enabled.
    	Duplicate tokens at the same position (which may result from Stemmed Synonyms or
    	WordDelim parts) are removed.
    	-->
        <fieldType name="text" class="solr.TextField" positionIncrementGap="100">
            <analyzer type="index">
                <tokenizer class="solr.WhitespaceTokenizerFactory"/>
                <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt"/>
                <filter class="solr.WordDelimiterFilterFactory"
                        generateWordParts="1"
                        generateNumberParts="1"
                        catenateWords="1"
                        catenateNumbers="1"
                        catenateAll="0"/>
                <filter class="solr.LowerCaseFilterFactory"/>
                <filter class="solr.EnglishPorterFilterFactory" protected="protwords.txt"/>
                <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
            </analyzer>

            <analyzer type="query">
                <tokenizer class="solr.WhitespaceTokenizerFactory"/>
                <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>
                <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt"/>
                <filter class="solr.WordDelimiterFilterFactory"
                        generateWordParts="1"
                        generateNumberParts="1"
                        catenateWords="1"
                        catenateNumbers="1"
                        catenateAll="0"/>
                <filter class="solr.LowerCaseFilterFactory"/>
                <filter class="solr.EnglishPorterFilterFactory" protected="protwords.txt"/>
                <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
            </analyzer>
        </fieldType>

        <fieldType name="textsort" class="solr.TextField" positionIncrementGap="100">
            <analyzer type="index">
                <tokenizer class="solr.KeywordTokenizerFactory"/>
                <filter class="solr.LowerCaseFilterFactory"/>
                <filter class="solr.ASCIIFoldingFilterFactory"/>
            </analyzer>

            <analyzer type="query">
                <tokenizer class="solr.KeywordTokenizerFactory"/>
                <filter class="solr.LowerCaseFilterFactory"/>
                <filter class="solr.ASCIIFoldingFilterFactory"/>
            </analyzer>
        </fieldType>
    </types>

    <fields>
        <!--
        The Document ID is a globally unique ID formed by merging the type and the primary key together, e.g.
        an Asset object with PK 112 would be Asset112.
        -->
        <field name="luceneDocumentId" type="string" indexed="true" stored="true" required="true"/>

        <!--
        The Document Type represents the OpenFISMA data model which a particular document was generated from
        -->
        <field name="luceneDocumentType" type="string" indexed="true" stored="true" required="true"/>

        <!--
        Each document also requires the primary key to be stored in the id field.
        -->
        <field name="id" type="string" indexed="true" stored="true" required="true"/>

        <!--
        Dynamic types are formed by naming a field with a suffix. Each suffix corresponds to one of the types defined
        above. In this way, the schema does not need to be regenerated every time OpenFISMA's data model changes, as
        long as there are a sufficient number of types available to describe everything that OpenFISMA models.
        -->
        <dynamicField name="*_date" type="date" indexed="true" stored="true"/>
        <dynamicField name="*_datetime" type="date" indexed="true" stored="true"/>
        <dynamicField name="*_enum" type="textsort" indexed="true" stored="true"/>
        <dynamicField name="*_enumsort" type="sint" indexed="true" stored="true"/>
        <dynamicField name="*_float" type="sfloat" indexed="true" stored="true"/>
        <dynamicField name="*_integer" type="sint" indexed="true" stored="true"/>
        <dynamicField name="*_text" type="text" indexed="true" stored="true"/>
        <dynamicField name="*_textsort" type="textsort" indexed="true" stored="true"/>
    </fields>

    <uniqueKey>luceneDocumentId</uniqueKey>
    <defaultSearchField>id</defaultSearchField>
    <solrQueryParser defaultOperator="OR"/>
</schema>
