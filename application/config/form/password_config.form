; This is the form for configuring the password complexity
;
; This form should be loaded through FormManager::loadForm() in order to recieve
; the proper decorators, filters, etc.
;
; Author    Ryan Yang <ryan@users.sourceforge.net>
; Copyright (c) Endeavor Systems, Inc. 2008 (http://www.endeavorsystems.com)
; License   http://www.openfisma.org/mw/index.php?title=License
; Version   $Id: password_config.form 2140 2009-08-25 21:06:30Z nathanrharris $

[password_config]
elementPrefixPath.prefix = Fisma_Form
elementPrefixPath.path = Fisma/Form
elementPrefixPath.type = Validate
method = "post"
action = "/panel/config/type/password"
elementFilters.trim = "StringTrim"
elementFilters.tags = "StripTags"

elements.failure_threshold.type = "text"
elements.failure_threshold.options.label = "Account Lockout (0-99)"
elements.failure_threshold.options.validators.digits.validator = "Digits"
elements.failure_threshold.options.required = true
elements.failure_threshold.options.validators.between.validator = "Between"
elements.failure_threshold.options.validators.between.options.min = "0"
elements.failure_threshold.options.validators.between.options.max = "99"
elements.failure_threshold.options.tooltip = "<p><b>Account Lockout</b></p><p>This is the duration or number of incorrect logins a user can make before OpenFISMA locks the user account.</p>"
displayGroups.general.elements.failure_threshold = "failure_threshold"

elements.unlock_enabled.type = "checkbox"
elements.unlock_enabled.options.label = "Automated Account Unlock"
elements.unlock_enabled.options.validators.digits.validator = "Digits"
elements.unlock_enabled.options.validators.between.validator = "Between"
elements.unlock_enabled.options.validators.between.options.min = "0"
elements.unlock_enabled.options.validators.between.options.max = "1"
elements.unlock_enabled.options.tooltip = "<p><b>Automated Account Unlock</b></p><p>This feature allows OpenFISMA to automatically unlock user accounts which have become locked due to incorrect username/password attempts. This prevents a denial of service attack created by a malicious attacker trying to brute force username/password combinations.</p>"
displayGroups.general.elements.unlock_enabled = "unlock_enabled"

elements.unlock_duration.type = "text"
elements.unlock_duration.options.label = "Account Unlock Duration (minutes)"
elements.unlock_duration.options.validators.digits.validator = "Digits"
elements.unlock_duration.options.validators.greaterThan.validator = "GreaterThan"
elements.unlock_duration.options.validators.greaterThan.options.value = 0
elements.unlock_duration.options.required = true
elements.unlock_duration.options.tooltip = "<p><b>Account Unlock Duration</b></p><p>If you have enabled the Automated Account Unlock feature, you will need to tell OpenFISMA how many minutes it must wait before unlocking the user account. For example, if you set this to 5, a user who has locked his account only needs to wait five minutes before he tries again, no need to call the helpdesk for a password reset.</p>"
displayGroups.general.elements.unlock_duration = "unlock_duration"

elements.pass_expire.type = "text"
elements.pass_expire.options.label = "Password Expiration (days)"
elements.pass_expire.options.validators.digits.validator = "Digits"
elements.pass_expire.options.validators.greaterThan.validator = "GreaterThan"
elements.pass_expire.options.validators.greaterThan.options.value = 0
elements.pass_expire.options.required = true
elements.pass_expire.options.tooltip = "<p><b>Password Expiration</b></p><p>This tells OpenFISMA how long a user has before his password expires. For example, if we set this to 30, all users will need to create new passwords every 30 days or there accounts will be disabled.</p>"
displayGroups.general.elements.pass_expire  = "pass_expire"

elements.pass_warning.type = "text"
elements.pass_warning.options.label = "Warning Days for Password Expiration"
elements.pass_warning.options.validators.digits.validator = "Digits"
elements.pass_warning.options.validators.greaterThan.validator = "GreaterThan"
elements.pass_warning.options.validators.greaterThan.options.value = 0
elements.pass_warning.options.required = true
elements.pass_warning.options.tooltip = "<p><b>Warning Days for Password Expiration</b></p><p>This sets the period before a user's password will expire that OpenFISMA will display a warning to the user alerting them that they need to change there password. For example, if we set this number to 14, a user will recieve a warning that his password will expire in 14 days and every day there after until it becomes expired or the user changes there password.</p>"
displayGroups.general.elements.password_warningdays = "pass_warning"

elements.pass_uppercase.type = "checkbox"
elements.pass_uppercase.options.label = "Require Upper Case Characters"
elements.pass_uppercase.options.validators.digits.validator = "Digits"
elements.pass_uppercase.options.validators.between.validator = "Between"
elements.pass_uppercase.options.validators.between.options.min = 0
elements.pass_uppercase.options.validators.between.options.max = 1
displayGroups.general.elements.pass_uppercase = "pass_uppercase"


elements.pass_lowercase.type = "checkbox"
elements.pass_lowercase.options.label = "Require Lower Case Characters"
elements.pass_lowercase.options.validators.digits.validator = "Digits"
elements.pass_lowercase.options.validators.between.validator = "Between"
elements.pass_lowercase.options.validators.between.options.min = 0
elements.pass_lowercase.options.validators.between.options.max = 1
displayGroups.general.elements.pass_lowercase = "pass_lowercase"

elements.pass_numerical.type = "checkbox"
elements.pass_numerical.options.label = "Require Numeric Characters"
elements.pass_numerical.options.validators.digits.validator = "Digits"
elements.pass_numerical.options.validators.between.validator = "Between"
elements.pass_numerical.options.validators.between.options.min = 0
elements.pass_numerical.options.validators.between.options.max = 1
displayGroups.general.elements.pass_numerical = "pass_numerical"

elements.pass_special.type = "checkbox"
elements.pass_special.options.label = "Require Special Characters"
elements.pass_special.options.validators.digits.validator = "Digits"
elements.pass_special.options.validators.between.validator = "Between"
elements.pass_special.options.validators.between.options.min = 0
elements.pass_special.options.validators.between.options.max = 1
displayGroups.general.elements.pass_special = "pass_special"

elements.pass_min_length.type = "text"
elements.pass_min_length.options.label = "Minimum Password length"
elements.pass_min_length.options.validators.int.validator = "Int"
elements.pass_min_length.options.validators.greaterThan.validator = "GreaterThan"
elements.pass_min_length.options.validators.greaterThan.options.value = 0
elements.pass_min_length.options.size = 30
displayGroups.general.elements.pass_min_length = "pass_min_length"

elements.pass_max_length.type = "text"
elements.pass_max_length.options.label = "Maximum Password length"
elements.pass_max_length.options.validators.int.validator = "Int"
elements.pass_max_length.options.validators.greaterThan.validator = "GreaterThan"
elements.pass_max_length.options.validators.greaterThan.options.value = 0
elements.pass_max_length.options.validators.maxLength.validator = "MaxPasswordLength"
elements.pass_max_length.options.size = 30
elements.pass_max_length.options.required = true
displayGroups.general.elements.pass_max_length = "pass_max_length"

elements.savePassword.type = "Form_Button_Submit"
elements.savePassword.options.label = "Save Changes"
displayGroups.general.elements.savePassword = "savePassword"