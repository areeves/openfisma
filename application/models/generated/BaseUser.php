<?php

/**
 * BaseUser
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property timestamp $createdTs
 * @property timestamp $modifiedTs
 * @property string $username
 * @property string $password
 * @property string $passwordSalt
 * @property timestamp $passwordTs
 * @property string $passwordHistory
 * @property enum $hashType
 * @property timestamp $lastRob
 * @property boolean $locked
 * @property timestamp $lockTs
 * @property enum $lockType
 * @property integer $failureCount
 * @property integer $oldFailureCount
 * @property string $lastLoginIp
 * @property string $currentLoginIp
 * @property timestamp $lastLoginTs
 * @property string $title
 * @property string $nameFirst
 * @property string $nameLast
 * @property string $email
 * @property boolean $emailValidate
 * @property string $phoneOffice
 * @property string $phoneMobile
 * @property integer $searchColumnsPref
 * @property integer $notifyFrequency
 * @property timestamp $mostRecentNotifyTs
 * @property string $notifyEmail
 * @property Doctrine_Collection $Roles
 * @property Doctrine_Collection $Organizations
 * @property Doctrine_Collection $Events
 * @property Doctrine_Collection $AccountLogs
 * @property Doctrine_Collection $AuditLogs
 * @property Doctrine_Collection $Comments
 * @property Doctrine_Collection $EmailValidation
 * @property Doctrine_Collection $Evidence
 * @property Doctrine_Collection $Findings
 * @property Doctrine_Collection $FindingEvaluations
 * @property Doctrine_Collection $Notifications
 * @property Doctrine_Collection $Uploads
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 5441 2009-01-30 22:58:43Z jwage $
 */
abstract class BaseUser extends Doctrine_Record
{
    public function setTableDefinition()
    {
        $this->setTableName('user');
        $this->hasColumn('createdTs', 'timestamp', null, array('type' => 'timestamp'));
        $this->hasColumn('modifiedTs', 'timestamp', null, array('type' => 'timestamp'));
        $this->hasColumn('username', 'string', 255, array('type' => 'string', 'unique' => true, 'extra' => array('logicalName' => 'User Name', 'purify' => 'plaintext', 'template' => true), 'comment' => 'This users unique authentication credential', 'length' => '255'));
        $this->hasColumn('password', 'string', 255, array('type' => 'string', 'extra' => array('logicalName' => 'Password', 'template' => 'true'), 'length' => '255'));
        $this->hasColumn('passwordSalt', 'string', 10, array('type' => 'string', 'fixed' => 1, 'comment' => 'A randomly generated salt, used to discourage rainbow table attacks against the password database', 'length' => '10'));
        $this->hasColumn('passwordTs', 'timestamp', null, array('type' => 'timestamp'));
        $this->hasColumn('passwordHistory', 'string', null, array('type' => 'string'));
        $this->hasColumn('hashType', 'enum', null, array('type' => 'enum', 'values' => array(0 => 'md5', 1 => 'sha1', 2 => 'sha224', 3 => 'sha256', 4 => 'sha384', 5 => 'sha512')));
        $this->hasColumn('lastRob', 'timestamp', null, array('type' => 'timestamp', 'comment' => 'The last time this user digitally accepted the Rules of Behavior'));
        $this->hasColumn('locked', 'boolean', null, array('type' => 'boolean', 'default' => false));
        $this->hasColumn('lockTs', 'timestamp', null, array('type' => 'timestamp'));
        $this->hasColumn('lockType', 'enum', null, array('type' => 'enum', 'values' => array(0 => 'manual', 1 => 'password', 2 => 'inactive', 3 => 'expired'), 'comment' => 'Manual lock means the admin locked the account. Password lock means several consecutive password failures. Inactive lock means the user has not logged in recently enough. Expired locked means the password has expired.'));
        $this->hasColumn('failureCount', 'integer', null, array('type' => 'integer', 'default' => 0, 'comment' => 'How many times the user entered the wrong password before successfully logging in'));
        $this->hasColumn('oldFailureCount', 'integer', null, array('type' => 'integer', 'default' => 0, 'comment' => 'Used to store the failure count throughout the session'));
        $this->hasColumn('lastLoginIp', 'string', 15, array('type' => 'string', 'ip' => true, 'length' => '15'));
        $this->hasColumn('currentLoginIp', 'string', 15, array('type' => 'string', 'ip' => true, 'length' => '15'));
        $this->hasColumn('lastLoginTs', 'timestamp', null, array('type' => 'timestamp'));
        $this->hasColumn('title', 'string', 255, array('type' => 'string', 'extra' => array('logicalName' => 'Title', 'purify' => 'plaintext', 'template' => true), 'comment' => 'The users position or title within the agency', 'length' => '255'));
        $this->hasColumn('nameFirst', 'string', 255, array('type' => 'string', 'extra' => array('logicalName' => 'First Name', 'template' => true, 'purify' => 'plaintext'), 'comment' => 'The users first name', 'length' => '255'));
        $this->hasColumn('nameLast', 'string', 255, array('type' => 'string', 'extra' => array('logicalName' => 'Last Name', 'template' => true, 'purify' => 'plaintext'), 'comment' => 'The users last name', 'length' => '255'));
        $this->hasColumn('email', 'string', 255, array('type' => 'string', 'extra' => array('logicalName' => 'E-mail Address', 'template' => true, 'purify' => 'plaintext'), 'email' => true, 'comment' => 'The users primary e-mail address', 'length' => '255'));
        $this->hasColumn('emailValidate', 'boolean', null, array('type' => 'boolean', 'default' => false, 'comment' => 'Whether the user has validated their e-mail address'));
        $this->hasColumn('phoneOffice', 'string', 10, array('type' => 'string', 'fixed' => 1, 'extra' => array('logicalName' => 'Office Phone', 'template' => true, 'purify' => 'plaintext'), 'comment' => 'U.S. 10 digit phone number; stored without punctuation', 'length' => '10'));
        $this->hasColumn('phoneMobile', 'string', 10, array('type' => 'string', 'fixed' => 1, 'extra' => array('logicalName' => 'Mobile Phone', 'template' => true, 'purify' => 'plaintext'), 'comment' => 'U.S. 10 digit phone number, stored as 10 digits without punctuation', 'length' => '10'));
        $this->hasColumn('searchColumnsPref', 'integer', null, array('type' => 'integer', 'comment' => 'A bitmask corresponding to visible columns on the search page'));
        $this->hasColumn('notifyFrequency', 'integer', null, array('type' => 'integer'));
        $this->hasColumn('mostRecentNotifyTs', 'timestamp', null, array('type' => 'timestamp'));
        $this->hasColumn('notifyEmail', 'string', 255, array('type' => 'string', 'email' => true, 'length' => '255'));
    }

    public function setUp()
    {
        $this->hasMany('Role as Roles', array('refClass' => 'UserRole',
                                              'local' => 'userId',
                                              'foreign' => 'roleId'));

        $this->hasMany('Organization as Organizations', array('refClass' => 'UserOrganization',
                                                              'local' => 'userId',
                                                              'foreign' => 'organizationId'));

        $this->hasMany('Event as Events', array('refClass' => 'UserEvent',
                                                'local' => 'userId',
                                                'foreign' => 'eventId'));

        $this->hasMany('AccountLog as AccountLogs', array('local' => 'id',
                                                          'foreign' => 'userId'));

        $this->hasMany('AuditLog as AuditLogs', array('local' => 'id',
                                                      'foreign' => 'userId'));

        $this->hasMany('Comment as Comments', array('local' => 'id',
                                                    'foreign' => 'userId'));

        $this->hasMany('EmailValidation', array('local' => 'id',
                                                'foreign' => 'userId'));

        $this->hasMany('Evidence', array('local' => 'id',
                                         'foreign' => 'userId'));

        $this->hasMany('Finding as Findings', array('local' => 'id',
                                                    'foreign' => 'createdByUserId'));

        $this->hasMany('FindingEvaluation as FindingEvaluations', array('local' => 'id',
                                                                        'foreign' => 'userId'));

        $this->hasMany('Notification as Notifications', array('local' => 'id',
                                                              'foreign' => 'userId'));

        $this->hasMany('SystemDocument as Uploads', array('local' => 'id',
                                                          'foreign' => 'userId'));

        $softdelete0 = new Doctrine_Template_SoftDelete();
        $timestampable0 = new Doctrine_Template_Timestampable(array('created' => array('name' => 'createdTs', 'type' => 'timestamp'), 'updated' => array('name' => 'modifiedTs', 'type' => 'timestamp')));
        $this->actAs($softdelete0);
        $this->actAs($timestampable0);

    $this->addListener(new XssListener(), 'XssListener');
    $this->addListener(new BaseListener(), 'BaseListener');
    $this->addListener(new UserListener(), 'UserListener');
    }
}