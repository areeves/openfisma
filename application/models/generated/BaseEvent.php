<?php

/**
 * BaseEvent
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property string $name
 * @property string $description
 * @property integer $privilegeId
 * @property Privilege $Privilege
 * @property Doctrine_Collection $Users
 * @property Doctrine_Collection $Evaluations
 * @property Doctrine_Collection $Notifications
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 5441 2009-01-30 22:58:43Z jwage $
 */
abstract class BaseEvent extends Doctrine_Record
{
    public function setTableDefinition()
    {
        $this->setTableName('event');
        $this->hasColumn('name', 'string', 255, array('type' => 'string', 'comment' => 'The name used internally by openfisma to keep track of Events. For maximum versatility, the name is defined in ALL_CAPS using underscores as word boundaries. No other characters should be used.', 'length' => '255'));
        $this->hasColumn('description', 'string', 255, array('type' => 'string', 'comment' => 'A human-readable description of the event; In the log, this will come out as \\"<description> by <user> at <time>\\", so the description should be written to fit the grammar. Example: \\"Roof Was Raised by <user> at <time>\\"', 'length' => '255'));
        $this->hasColumn('privilegeId', 'integer', null, array('type' => 'integer', 'comment' => 'The privilege which is required in order to receive this event notification'));
    }

    public function setUp()
    {
        $this->hasOne('Privilege', array('local' => 'privilegeId',
                                         'foreign' => 'id'));

        $this->hasMany('User as Users', array('refClass' => 'UserEvent',
                                              'local' => 'eventId',
                                              'foreign' => 'userId'));

        $this->hasMany('Evaluation as Evaluations', array('local' => 'id',
                                                          'foreign' => 'eventId'));

        $this->hasMany('Notification as Notifications', array('local' => 'id',
                                                              'foreign' => 'eventId'));
    }
}