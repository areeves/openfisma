<?php
/**
 * Copyright (c) 2010 Endeavor Systems, Inc.
 *
 * This file is part of OpenFISMA.
 *
 * OpenFISMA is free software: you can redistribute it and/or modify it under the terms of the GNU General Public 
 * License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * OpenFISMA is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied 
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more 
 * details.
 *
 * You should have received a copy of the GNU General Public License along with OpenFISMA.  If not, see 
 * {@link http://www.gnu.org/licenses/}.
 */

/**
 * Vulnerability table.
 *
 * @author     Mark E. Haase <mhaase@endeavorsystems.com>
 * @copyright  (c) Endeavor Systems, Inc. 2010 {@link http://www.endeavorsystems.com}
 * @license    http://www.openfisma.org/content/license GPLv3
 * @package    Models
 */
class VulnerabilityTable extends Fisma_Doctrine_Table implements Fisma_Search_Searchable
{
    /**
     * Implement the interface for Searchable
     */
    public function getSearchableFields()
    {
        return array (
            'id' => array(
                'initiallyVisible' => true,
                'label' => 'ID',
                'sortable' => true,
                'type' => 'integer'
            ),
            'createdTs' => array(
                'initiallyVisible' => false,
                'label' => 'Created Timestamp',
                'sortable' => true,
                'type' => 'datetime'
            ),
            'closedTs' => array(
                'initiallyVisible' => false,
                'label' => 'Closed Timestamp',
                'sortable' => true,
                'type' => 'datetime'
            ),
            'asset' => array(
                'initiallyVisible' => true,
                'label' => 'Asset',
                'join' => array(
                    'model' => 'Asset',
                    'relation' => 'Asset',
                    'field' => 'name'
                ),
                'sortable' => true,
                'type' => 'text'
            ),
            'network' => array(
                'initiallyVisible' => true,
                'label' => 'Network',
                'join' => array(
                    'model' => 'Network',
                    'relation' => 'Asset.Network',
                    'field' => 'nickname'
                ),
                'sortable' => true,
                'type' => 'text'
            ),
            'discoveredDate' => array(
                'initiallyVisible' => true,
                'label' => 'Discovery Date',
                'sortable' => true,
                'type' => 'date'
            ),
            'status' => array(
                'initiallyVisible' => true,
                'label' => 'Status',
                'sortable' => true,
                'type' => 'text'
            ),
            'description' => array(
                'initiallyVisible' => true,
                'label' => 'Description',
                'sortable' => false,
                'type' => 'text'
            ),
            'recommendation' => array(
                'initiallyVisible' => false,
                'label' => 'Recommendation',
                'sortable' => false,
                'type' => 'text'
            ),
            'threat' => array(
                'initiallyVisible' => false,
                'label' => 'Threat',
                'sortable' => false,
                'type' => 'text'
            ),
            'threatLevel' => array(
                'enumValues' => $this->getEnumValues('threatLevel'),
                'initiallyVisible' => true,
                'label' => 'Threat Level',
                'sortable' => true,
                'type' => 'enum'
            ),
            'cvssBaseScore' => array(
                'initiallyVisible' => true,
                'label' => 'CVSS Base Score',
                'sortable' => true,
                'type' => 'float'
            ),
            'cvssVector' => array(
                'initiallyVisible' => false,
                'label' => 'CVSS Vector',
                'sortable' => true,
                'type' => 'text'
            ),
            'organizationId' => array(
                'hidden' => true,
                'join' => array(
                    'model' => 'Asset',
                    'relation' => 'Asset',
                    'field' => 'orgSystemId'
                ),
                'type' => 'integer'
            )
        );
    }

    /**
     * Return a list of fields which are used for access control
     *
     * @return array
     */
    public function getAclFields()
    {
        $aclFields = array();
        $currentUser = CurrentUser::getInstance();

        // Invoke the ACL constraint only if the user doesn't have the "unaffiliated assets" privilege
        if (!$currentUser->acl()->hasPrivilegeForClass('unaffiliated', 'Asset')) {
            $aclFields['organizationId'] = 'VulnerabilityTable::getOrganizationIds';
        }

        return $aclFields;
    }
    
    /**
     * Provide ID list for ACL filter
     *
     * @return array
     */
    static function getOrganizationIds()
    {
        $currentUser = CurrentUser::getInstance();

        $organizations = $currentUser->getOrganizationsByPrivilege('vulnerability', 'read');
        $organizationIds = $organizations->toKeyValueArray('id', 'id');

        return $organizationIds;
    }
}
