<?php
/**
 * Copyright (c) 2008 Endeavor Systems, Inc.
 *
 * This file is part of OpenFISMA.
 *
 * OpenFISMA is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * OpenFISMA is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with OpenFISMA.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @author    Ryan Yang <ryanyang@users.sourceforge.net>
 * @copyright (c) Endeavor Systems, Inc. 2008 (http://www.endeavorsystems.com)
 * @license   http://www.openfisma.org/mw/index.php?title=License
 * @version   $Id:$
 * @package   Model
 */
 
/**
 * Notification
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package   Model
 * @copyright (c) Endeavor Systems, Inc. 2008 (http://www.endeavorsystems.com)
 * @license   http://www.openfisma.org/mw/index.php?title=License
 */
class Notification extends BaseNotification
{
    /**
     * Add notifications for the specified event.
     *
     * @param string $eventName The name of the event which generated the notification
     * @param object $record  the model which is changed
     * @param User $user  the user object
     * @param int $organizationId The organization id.
     */
    public static function notify($eventName, $record, $user, $organizationId = null)
    {
        if (!Fisma::getNotificationEnabled()) {
            return;
        }

        $event = Doctrine::getTable('Event')->findOneByName($eventName);

        if (!$event) {
            throw new Fisma_Exception("No event named '$eventName' was found");
        }

        $eventText = $event->description;

        // If the model has a "nickname" field, then identify the record by the nickname. Otherwise, identify the record
        // by it's ID, which is a field that all models are expected to have (except for join tables). Some notifications
        // won't have a nickname or ID (such as notifications about the application's configuration)
        if (isset($record) && isset($record->nickname)) {
            $eventText .= " ($record->nickname)";
        } elseif (isset($record)) {
            $eventText .= " (ID #$record->id)";            
        }

        if (!is_null($user)) {
            $eventText .= " by $user->nameFirst $user->nameLast";
        }

        // Figure out which users are listening for this event
        $eventsQuery = Doctrine_Query::create()
            ->select('e.id, u.id')
            ->from('User u')
            ->innerJoin('u.Events e')
            ->where('e.id = ?', $event->id)
            ->setHydrationMode(Doctrine::HYDRATE_SCALAR);
        
        // If the event is limited in scope to a specific organization, then filter for users who are allowed
        // access to that organization
        if ($organizationId != null) {
            $eventsQuery->innerJoin('u.Organizations o')
                        ->andWhere('o.id = ?', $organizationId);
        }

        $userEvents = $eventsQuery->execute();

        $notifications = new Doctrine_Collection('Notification');
        foreach ($userEvents as $userEvent) {
            $notification = new Notification();
            $notification->eventId   = $userEvent['e_id'];
            $notification->userId    = $userEvent['u_id'];
            $notification->eventText = $eventText;
            $notifications[] = $notification;
        }
        /** @todo this does not perform well. to send notifications to 500 users, this would create 500 queries.
         * unfortunately, DQL does not provide a good alternative that I am aware of. 
         */
        $notifications->save();
    }
}
