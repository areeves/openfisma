<?php Fisma_Format_Section::startSection("Search Results <span id='searchResultsTotalFound'></span>"); ?>
    <div class="toolbar">
        <?php 
            echo new Fisma_Yui_Form_Button_Link('exportPdf',
                                          array('value' => 'Export PDF', 
                                                'href' => "{$this->attachUrl}/format/pdf", 
                                                'imageSrc' => '/images/pdf.gif'));
            echo new Fisma_Yui_Form_Button_Link('exportExcel',
                                          array('value' => 'Export Excel', 
                                                'href' => "{$this->attachUrl}/format/xls", 
                                                'imageSrc' => '/images/xls.gif'));
            $columnOptionsButton = new Fisma_Yui_Form_Button('columnOptions',
                                                       array('label' => 'Options', 
                                                             'onClickFunction' => 'showColumnOptions',
                                                             'imageSrc' => '/images/options.png'));
            echo $columnOptionsButton;
        ?>
    </div>
    <div id="dynamicdata"></div> 
    <div id="columnOptionsPanelDiv">
        <div id="columnOptionsPanelBody" class="bd">
            <!-- YUI fills in the body -->
        </div>
    </div>
<?php Fisma_Format_Section::stopSection(); ?>

<script type="text/javascript">
// Column definitions
var myColumnDefs = [
    <?php 
    // PHP is used to populate this javascript array with the column values defined in the controller
    $text = '';
    foreach ($this->columns as $columnName => $columnDef) {
        $text .= "{key:\"$columnName\", label:\"{$columnDef['label']}\", "
               . 'sortable: ' . ($columnDef['sortable'] ? 'true' : 'false') . ', '
               . 'hidden: ' . ($columnDef['hidden'] ? 'true' : 'false') . "},";
    }
    $text = substr($text, 0, -1); // remove trailing comma, otherwise IE would throw an exception
    echo $text;
    ?>
];

// Custom parser
var stringToDate = function(sData) {
    var array = sData.split("-");
    return new Date(array[1] + " " + array[0] + ", " + array[2]);
};

// DataSource instance
var myDataSource = new YAHOO.util.DataSource("/remediation/search2/format/json");
myDataSource.responseType = YAHOO.util.DataSource.TYPE_JSON;
myDataSource.responseSchema = {
    resultsList: "findings.records",
    metaFields: {
        totalRecords: "findings.totalRecords",
        highlightWords: "findings.highlightWords",
        exception: "findings.exception"
    }
};

// A function which builds the query string
var myRequestBuilder = function(oState, oSelf) {
    // Get states or use defaults
    oState = oState || {pagination:null, sortedBy:null};
    var sort = (oState.sortedBy) ? oState.sortedBy.key : "id";
    var dir = (oState.sortedBy && oState.sortedBy.dir == 'yui-dt-asc') ? "asc" : "desc";
    var startIndex = oState.pagination.recordOffset;
    var count = oState.pagination.rowsPerPage;

    // Build custom request
    var request = "<?php echo $this->link; ?>" + 
                  "/sortby/" + sort +
                  "/dir/" + dir +
                  "/startIndex/" + startIndex +
                  "/count/" + count;
    return request;
};

// DataTable configuration
var myConfigs = {
    initialRequest: "<?php echo $this->link; ?>"
                  + "/sortby/id/dir/asc/startIndex/0/count/"
                  + "<?php echo $this->pageInfo['count']; ?>",
    dynamicData: true, 
    sortedBy : {key:"id", dir:YAHOO.widget.DataTable.CLASS_ASC},
    paginator: new YAHOO.widget.Paginator(
        { 
            rowsPerPage:<?php echo $this->pageInfo['count']; ?>,
            template:"{FirstPageLink} {PreviousPageLink} {PageLinks} {NextPageLink} {LastPageLink}"
        }
    ), 
    generateRequest : myRequestBuilder
};
    
// DataTable instance
var myDataTable = new YAHOO.widget.DataTable("dynamicdata", myColumnDefs, myDataSource, myConfigs);

// Holds an array of words which need to be highlighted
var highlightWords;

// Update totalRecords on the fly with value from server
myDataTable.handleDataReturnPayload = function(oRequest, oResponse, oPayload) {
    oPayload.totalRecords = oResponse.meta.totalRecords;
    highlightWords = oResponse.meta.highlightWords;

    // display total records in the search results header, if not already present
    var searchResultsHeader = document.getElementById('searchResultsTotalFound');
    if (!searchResultsHeader.firstChild) {
        var totalRecords = oResponse.meta.totalRecords ? oResponse.meta.totalRecords : 0;
        var searchTotalFound = document.createTextNode('(' + totalRecords + ' records found)');
        searchResultsHeader.appendChild(searchTotalFound);
    }
    
    // If an exception occurred, then display that to the user
    if (!YAHOO.lang.isUndefined(oResponse.meta.exception)) {
        var alertEl = document.getElementById('msgbar');
        alertEl.style.border = "1px solid red";
        alertEl.style.color = "red";
        alertEl.style.backgroundColor = "pink";
        alertEl.style.display = "block";
        alertEl.innerHTML = "<b>" + oResponse.meta.exception + "</b>";
    }
    
    return oPayload;
}

// Enable row highlighting and clicking
myDataTable.subscribe("rowMouseoverEvent", myDataTable.onEventHighlightRow); 
myDataTable.subscribe("rowMouseoutEvent", myDataTable.onEventUnhighlightRow);
myDataTable.subscribe("rowClickEvent", 
    function (oArgs) {
        var elTarget = oArgs.target;
        var oRecord = this.getRecord(elTarget);
        var keywords = "<?php echo (isset($this->keywords)) ? "/keywords/{$this->keywords}" : ''; ?>";
        document.location = "/panel/remediation/sub/view/id/" + oRecord.getData("id") + keywords;
    }
);


// Enable keyword highlighting when loading data from the data source
myDataTable.subscribe("renderEvent", 
    function (oArgs) {
        var tableElement = YAHOO.util.Selector.query('.yui-dt-data', 'dynamicdata', true);
        highlight(tableElement, highlightWords);        
    }
);

var columnOptionsShowing = false;
var columnOptionsPanel;
/* A function which displays the buttons for showing/hiding columns in the search table */
function showColumnOptions() {
    if (!columnOptionsPanel) {        
        // Add the buttons to the panel
        for (column in myColumnDefs) {
            var title = "";

            if (!myColumnDefs[column].hidden) {
                title = myColumnDefs[column].label + " Button Checked. Click to UnCheck.";
            } else {
                title = myColumnDefs[column].label + " Button UnChecked. Click to Check.";
            }

            var oCheckButton9 = new YAHOO.widget.Button({  
                type: "checkbox",  
                label: myColumnDefs[column].label,  
                container: "columnOptionsPanelBody",
                checked: !myColumnDefs[column].hidden,
                onclick: {
                    fn: toggleColumn,
                    obj: myColumnDefs[column].key
                },
                title: title
            });
        }
        var saveButton = new YAHOO.widget.Button({
            type: "button",
            label: "Save",
            container: "columnOptionsPanelBody",
            onclick: {
                fn: saveColumnPreference
            }
        });
        
        // Setup the panel
        columnOptionsPanel = new YAHOO.widget.Panel('columnOptionsPanelDiv', {width:"300px"} ); 
        columnOptionsPanel.setHeader('Show/Hide Columns');
        columnOptionsPanel.setFooter('Tip: Click "Save" to make this your default column preference.');
        columnOptionsPanel.render(document.body); 
        columnOptionsPanel.center();
    }
    columnOptionsPanel.show();
}

/* This helper function actually handles the click event to toggle a column's visibility in the search table. */
function toggleColumn(event, columnKey) {
    // @yui update the user's preference for column display
    var column = myDataTable.getColumn(columnKey);
    if (this.get('checked')) {
        myDataTable.showColumn(column);
    } else {
        myDataTable.hideColumn(column);
    }

    saveColumnPreferenceCookie();
}

/* Save the current displayed columns as the default for this user. The default is stored in a session cookie and
 * also backed up in a column in the users table.
 *  - obj is a required parameter for a handler, but this handler does not use it.
 */
function saveColumnPreference(event, obj) {
    saveColumnPreferenceCookie();
    YAHOO.util.Connect.asyncRequest('GET', 
                                    '/user/set-column-preference', 
                                    null,
                                    null); 
    alert('Your preference has been saved. These columns will be visible whenever you log in.');
}

function saveColumnPreferenceCookie() {
    // The column preference is stored as a bitmap: 1=>visible, 0=>hidden.
    var prefBitmap = 0;
    var columnKeys = myDataTable.getColumnSet().keys;

    for (column in columnKeys) {
      if (!columnKeys[column].hidden) {
        prefBitmap |= 1 << column;
      }
    }
    // Now save the bitmask by calling the appropriate controller action. The controller doesn't return any data
    // for this action, so there is no check for the return value.
    YAHOO.util.Cookie.set("search_columns_pref", prefBitmap, {path: "/"});
}
</script>
