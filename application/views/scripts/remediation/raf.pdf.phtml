<?php
/** @codingStandardIgnoreFile - this file is beyond hope */
require_once ( 'pdf/class.ezpdf.php');
$finding = $this->finding;

// These constants define the font size for various parts of the document.
!defined('TITLE_TEXT_SIZE') ? define('TITLE_TEXT_SIZE', 18) : true;
!defined('BODY_TEXT_SIZE') ? define('BODY_TEXT_SIZE', 10) : true;
!defined('FOOTER_TEXT_SIZE') ? define('FOOTER_TEXT_SIZE', 8) : true;
!defined('FONTS') ? define('FONTS', Fisma::getPath('library') . '/pdf/fonts') : true;

// These options are used repeatedly throughout the document for consistent formatting.
$headerOptions = array('showHeadings'=>0,
                       'fontSize' => BODY_TEXT_SIZE,
                       'width'=>500);
$labelOptions = array('showHeadings'=>0,
                      'shaded'=>0,
                      'showLines'=>0,
                      'fontSize' => BODY_TEXT_SIZE,
                      'width'=>500);
$tableOptions = array('showHeadings'=>0,
                      'shaded'=>0,
                      'showLines'=>2,
                      'fontSize' => BODY_TEXT_SIZE,
                      'protectRows' => 999, // Prevents tables from being split at page boundaries
                      'width'=>400
                      );
$bodyTextOptions = array('left' => 25, // The left and right margin will align the body text with the headers
                         'right' => 25);

$system = $finding->ResponsibleOrganization->System;

$columns = $system->getTable()->getEnumValues('availability');
$columnsCols = array_reverse($columns);
$i = 0;
foreach ($columnsCols as $col) {
    foreach ($columns as $row) {
        $cellidx_lookup[$col][$row] = $i++;
    }
}

$threat_likelihood = $system->calculateThreatLikelihood($finding->threatLevel, $finding->countermeasuresEffectiveness);

$threat_index = $cellidx_lookup[$finding->threatLevel][$finding->countermeasuresEffectiveness];
$risk_index = $cellidx_lookup[$threat_likelihood][$this->securityCategorization];

// This is the "letter" page size
$pdf = new Cezpdf('letter');
$pdf->ezSetMargins(50,70,50,50);
$pdf->selectFont(FONTS . "/Helvetica.afm");

// Create footer -- this contains the required sensitivity marking
$all = $pdf->openObject();
$pdf->saveState();
$pdf->setStrokeColor(0,0,0,1);
$pdf->line(20,65,578,65);
$pdf->addText(70,54,6,'WARNING: This report is for internal, official use only.  This report contains sensitive computer security related information. Public disclosure of this information would risk');
$pdf->addText(70,44,6,'circumvention of the law. Recipients of this report must not, under any circumstances, show or release its contents for purposes other than official action. This report must be');
$pdf->addText(70,34,6,'safeguarded to prevent improper disclosure. Staff reviewing this document must hold a minimum of Public Trust Level 5C clearance.');
$pdf->restoreState();
$pdf->closeObject();
$pdf->addObject($all,'all');

$pdf->ezText('Risk Analysis Form (RAF)', TITLE_TEXT_SIZE, array('justification'=>'center'));
$pdf->ezText('', BODY_TEXT_SIZE, array('justification'=>'center')); //vertical blank

// Finding information section
$data = array(array('<b>Finding Information</b>'));
$pdf->ezTable($data, null, null, $headerOptions);
$pdf->ezText('', BODY_TEXT_SIZE, array('justification'=>'center'));

$data = array(array("<b>Finding Number:</b>",    $finding->id,
                    "<b>Finding Source:</b>",    $this->plainText($finding->Source->name)),
              array("<b>Date Opened:</b>",       $finding->createdTs,
                    "<b>Date Discovered:</b>",   $finding->discoveredDate),
              array("<b>Organization:</b>",      $system->Organization->name,"",""),
              array("<b>Asset(s) Affected:</b>", $finding->Asset->name,"",""));
$pdf->ezTable($data, null, null, $labelOptions);

$data = array(array("<b>Finding Description:</b>", $this->plainText($finding->description),"",""),
              array("<b>Recommendation:</b>",  $this->plainText($finding->recommendation),"",""));
$pdf->ezTable($data, null, null, $labelOptions);

// Risk analysis section
$pdf->ezText('', 10, array('justification'=>'center'));
$data = array(array('<b>Risk Analysis</b>'));
$pdf->ezTable($data, null, null, $headerOptions);
$pdf->ezText('', BODY_TEXT_SIZE, array('justification'=>'center'));
if ($this->securityCategorization == $columns['2']) {
    $effect = 'severe or catastrophic';
} elseif ($this->securityCategorization == $columns['1']) {
    $effect = 'serious';
} elseif ($this->securityCategorization == $columns['0']) {
    $effect = 'limited';
} else {
    $effect = '';
}
$pdf->ezText('<b><i>FIPS 199 System Security Categorization</i></b>', BODY_TEXT_SIZE, array('justification'=>'center'));
$data = array(array('<b>Confidentiality:</b>', $system->confidentiality),
              array('<b>Integrity:</b>',       $system->integrity),
              array('<b>Availability:</b>',    $system->availability),
              array('<b>Security Categorization:</b>', $this->securityCategorization),
              array('<b>Security Categorization Description:</b>',
                    !empty($effect)
                    ? "The loss of confidentiality, integrity, or availability could be expected to have a $effect"
                    . ' adverse effect on organizational operations, organizational assets, or individuals. This is the'
                    . ' maximum level of risk exposure based on the Information System Security Categorization data.'
                    : 'This system\'s Confidentiality, Integrity, and Availability are not defined; therefore, the'
                    . ' system security categorization is also undefined.'));

$pdf->ezTable($data, null, null, $labelOptions);
$pdf->ezText('', BODY_TEXT_SIZE, array('justification'=>'center')); //vertical blank

$pdf->ezText('<b><i>Threat Likelihood</i></b>', BODY_TEXT_SIZE, array('justification'=>'center'));

$data = array(array("<b>Threat Level                                        Countermeasure Effectiveness</b>"));
$pdf->ezTable($data, null, null, $tableOptions);

$data = array();
$i = 0;
$data[0][0] = '';
foreach ($columns as $countermeasures) {
    $i++;
    $data[0][$i] = "<b>$countermeasures</b>";
}
$j = 0;
$k = 0;
$i = 0;
foreach (array_reverse($columns) as $threat) {
    $i++;
    $data[$i][] = "<b>$threat</b>";
    foreach ($columns as $countermeasures) {
        $value = $system->calculateThreatLikelihood($threat, $countermeasures);
        $data[$i][] = $threat_index == $k++?'<b><i>'.$value.'</i></b>':$value;
    }
}

$pdf->ezTable($data, null, null, $tableOptions);
$overall_threat = $system->calculateThreatLikelihood($finding->threatLevel, $finding->countermeasuresEffectiveness);

$data = array(array("Based on the threat level and countermeasures currently in place (see below), the threat likelihood is <b>".$overall_threat."</b>".'.'));
$pdf->ezTable($data, null, null, $labelOptions);
$pdf->ezText('', BODY_TEXT_SIZE, array('justification'=>'center'));

$data = array(array("<b>Threat Description:</b>", $this->plainText($finding->threat), "", ""),
              array("<b>Threat Level:</b>", $finding->threatLevel, "", ""),
              array("<b>Description of Countermeasures:</b>", $this->plainText($finding->countermeasures), "", ""),
              array("<b>Countermeasures Effectiveness:</b>", $this->plainText($finding->countermeasuresEffectiveness), "", ""));
$pdf->ezTable($data, null, null, $labelOptions);

$pdf->ezText('', BODY_TEXT_SIZE, array('justification'=>'center')); //vertical blank

$pdf->ezText('<b><i>Risk Level</i></b>', BODY_TEXT_SIZE, array('justification'=>'center'));

$data = array(array("<b>Threat Likelihood                   Security Categorization of Information System</b>"));
$pdf->ezTable($data, null, null, $tableOptions);
$overall_risk = $system->calcMin($threat_likelihood, $this->securityCategorization);

$data = array();
$i = 0;
$data[0][0] = '';
foreach ($columns as $security_categorization) {
    $i++;
    $data[0][$i] = "<b>$security_categorization</b>";
}
$j = 0;
$k = 0;
$i = 0;
foreach (array_reverse($columns) as $threat_likelihood) {
    $i++;
    $data[$i][] = "<b>$threat_likelihood</b>";
    foreach ($columns as $security_categorization) {
        $value = $system->calcMin($threat_likelihood, $security_categorization);
        $data[$i][] = $risk_index == $k++?'<b><i>'.$value.'</i></b>':$value;
    }
}

$pdf->ezTable($data, null, null, $tableOptions);
$data = array(array("Based on the threat likelihood and security categorization of the information system, the finding presents a <b>".$overall_risk."</b> level of risk. "));
$pdf->ezTable($data, null, null, $labelOptions);
$pdf->ezText('', BODY_TEXT_SIZE, array('justification'=>'center'));

$data = array(array("Agency Recommendations based on Risk Levels:"));
$pdf->ezTable($data, null, null, $labelOptions);
$data = array(array('<b>Risk Level</b>', '<b>Risk Description and Necessary Actions</b>'),
              array('<b>'.$columns[2].'</b>', 'If an observation or finding is evaluated as a high risk, there is a strong need for corrective measures. An existing system may continue to operate, but a corrective action plan must be put in place as soon as possible.'),
              array('<b>'.$columns[1].'</b>', 'If an observation is rated as medium risk, corrective actions are needed and a plan must be developed to incorporate these actions within a reasonable period of time.'),
              array('<b>'.$columns[0].'</b>', 'If an observation is described as low risk, the system\'s AO must determine whether corrective actions are still required or decide to accept the risk.'));

$pdf->ezTable($data, null, null, $tableOptions);
$pdf->ezText('', BODY_TEXT_SIZE, array('justification'=>'center'));

// Mitigation Strategy section
$pdf->ezText('', BODY_TEXT_SIZE, array('justification'=>'center'));
$data = array(array('<b>Mitigation Strategy</b>'));
$pdf->ezTable($data, null, null, $headerOptions);
$pdf->ezText('', BODY_TEXT_SIZE, array('justification'=>'center'));
$ecdDate = $finding->currentEcd;
$data = array(array("<b>Type:</b>", $this->plainText($finding->type), "", ""),
              array("<b>Description:</b>", $this->plainText($finding->mitigationStrategy), "", ""),
              array("<b>Estimated Completion Date:</b>", $ecdDate, "", ""));
$pdf->ezTable($data, null, null, $labelOptions);

// Endorsement of Risk Level Analysis section
// only displayed for AR findings
if ('AR' == $this->plainText($finding->type)) {
    // a small separator between the previous section and this one
    $pdf->ezText('___________', BODY_TEXT_SIZE, array('justification'=>'center'));
    $pdf->ezText('', BODY_TEXT_SIZE, array('justification'=>'center'));
    
    // Business Owner Signature
    $data = array(
      array('Concur __ ', 'Non-Concur __ ','_____________________________________________','___/___/______'),
      array('',           '',              'Information System Owner (ISO)',               'Date')
    );

    $pdf->ezTable($data,
                  null,
                  null,
                  $labelOptions
                 );

    // Authorizing Official Signature
    $pdf->ezText('', FOOTER_TEXT_SIZE, array('justification'=>'center'));

    $data = array(
      array('Concur __ ', 'Non-Concur __ ','_____________________________________________','___/___/______'),
      array('',           '',              'Authorizing Official (AO)',                    'Date')
    );

    $pdf->ezTable($data,
                  null,
                  null,
                  $labelOptions
                 );
}

// IE has a bug where it can't display certain mimetypes if a no-cache header is sent,
// so we need to switch the header right before we stream the PDF.
header('Pragma: private');
header('Cache-Control: private');
echo $pdf->ezOutput();
