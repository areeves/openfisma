<script id='uploadDocumentScript' type="text/javascript">
var uiLayer = YAHOO.util.Dom.getRegion('selectLink');
var overlay = YAHOO.util.Dom.get('uploaderOverlay');
YAHOO.util.Dom.setStyle(overlay, 'width', uiLayer.right-uiLayer.left + "px");
YAHOO.util.Dom.setStyle(overlay, 'height', uiLayer.bottom-uiLayer.top + "px");

// Custom URL for the uploader swf file (same folder).
YAHOO.widget.Uploader.SWFURL = "/yui/uploader/assets/uploader.swf";

// Instantiate the uploader and write it to its placeholder div.

var uploader = new YAHOO.widget.Uploader( "uploaderOverlay" );

// Add event listeners to various events on the uploader.
// Methods on the uploader should only be called once the 
// contentReady event has fired.

uploader.addListener('contentReady', handleContentReady);
uploader.addListener('fileSelect', onFileSelect)
uploader.addListener('uploadStart', onUploadStart);
uploader.addListener('uploadProgress', onUploadProgress);
uploader.addListener('uploadCancel', onUploadCancel);
uploader.addListener('uploadComplete', onUploadComplete);
uploader.addListener('uploadCompleteData', onUploadResponse);
uploader.addListener('uploadError', onUploadError);
uploader.addListener('rollOver', handleRollOver);
uploader.addListener('rollOut', handleRollOut);
uploader.addListener('click', handleClick);
	
uploadLinkEl = document.getElementById('uploadLink');

uploadLinkEl.onclick = function() {
    upload();
    return false;
}

// Variable for holding the selected file id.
var fileID;

// When the mouse rolls over the uploader, this function
// is called in response to the rollOver event.
// It changes the appearance of the UI element below the Flash overlay.
function handleRollOver () {
	YAHOO.util.Dom.setStyle(YAHOO.util.Dom.get('selectLink'), 'color', "#FFFFFF");
	YAHOO.util.Dom.setStyle(YAHOO.util.Dom.get('selectLink'), 'background-color', "#000000");
}

// On rollOut event, this function is called, which changes the appearance of the
// UI element below the Flash layer back to its original state.
function handleRollOut () {
	YAHOO.util.Dom.setStyle(YAHOO.util.Dom.get('selectLink'), 'color', "#0000CC");
	YAHOO.util.Dom.setStyle(YAHOO.util.Dom.get('selectLink'), 'background-color', "#FFFFFF");
}

// When the Flash layer is clicked, the "Browse" dialog is invoked.
// The click event handler allows you to do something else if you need to.
function handleClick () {
}

// When contentReady event is fired, you can call methods on the uploader.
function handleContentReady (a) {	
	// Disallows multiple file selection in "Browse" dialog.
    uploader.setAllowLogging(true);
    uploader.setAllowMultipleFiles(false);
    uploader.clearFileList();
    // @todo doctrine set file filters 
	// Apply new set of file filters to the uploader.
	//uploader.setFileFilters(ff);
	uploaderInitialized = true;
}

// Actually uploads the files. Since we are only allowing one file
// to be selected, we use the upload function, in conjunction with the id 
// of the selected file (returned by the fileSelect event). We are also including
// the text of the variables specified by the user in the input UI.

function upload() {
    if ('' == document.getElementById('versionNotes').value) {
        alert("You must enter the version notes before uploading.");
        return;
    }
    if (fileID != null) {
        try {
            uploader.upload(fileID, 
    		                "/system/upload-document/id/<?php echo $this->organizationId; ?>", 
    		                "POST", 
    		                {
    		                    description : document.getElementById("versionNotes").value,
    						    documentTypeId : document.getElementById("documentType").value,
    						    sessionId : YAHOO.util.Cookie.get('OpenFISMA') //@todo can't hardcode openfisma here
    						},
                            'systemdoc');
        } catch (e) {
            alert('The upload failed. Please reselect the file and try again. (' + e + ')');
            uploader.clearFileList();
            document.getElementById('progressReport').value = "Select a file";
        }
	} else {
	    alert('Please select a file first.');
	}
}

// Fired when the user selects files in the "Browse" dialog
// and clicks "Ok". Here, we set the value of the progress
// report textfield to reflect the fact that a file has been
// selected.

function onFileSelect(event) {
	for (var file in event.fileList) {
	    if(YAHOO.lang.hasOwnProperty(event.fileList, file)) {
			fileID = event.fileList[file].id;
		}
	}

	document.getElementById('status').innerHTML = "Ready to upload: " + event.fileList[fileID].name;
}


// When the upload starts, we inform the user about it via
// the progress report textfield. 
function onUploadStart(event) {
	document.getElementById('status').innerHTML = "Starting upload...";
}

// As upload progresses, we report back to the user via the
// progress report textfield.
function onUploadProgress(event) {
	prog = Math.round(100*(event["bytesLoaded"]/event["bytesTotal"]));
	document.getElementById('status').innerHTML = prog + "% uploaded...";
	document.getElementById('progressBarInner').style.width = prog + "%";
}

// Report back to the user that the upload has completed.
function onUploadComplete(event) {
	document.getElementById('status').innerHTML = "Upload complete. Verifying the file.";
}

// Report back to the user if there has been an error.
function onUploadError(event) {
	document.getElementById('status').innerHTML = "Upload error. Please try again.";
}

// Do something if an upload is canceled.
function onUploadCancel(event) {

}

// When the data is received back from the server, display it to the user
// in the server data text area.
function onUploadResponse(event) {
	returnData = YAHOO.lang.JSON.parse(event.data);
    if (returnData.success) {
        window.location.reload();
    } else {
        document.getElementById('status').innerHTML =  "Error: " + returnData.error;
    }
}
</script>

<div id="uiElements" style="display:inline;">
		<div>
		    <p><b>*Document Type:</b></p>
    		<p>
    		    <select id="documentType">
                    <?php
                        foreach ($this->documentTypes as $documentType) {
                            print "<option value='$documentType->id'>$documentType->name</option>";
                        }
                    ?>
    		    </select>    		    
    		</p>
		</div>
		<div>
		    <p><b>*Version Notes:</b></p>
		    <p><textarea id="versionNotes" rows="5" cols="50"></textarea></p>
		</div>
		<div id="uploaderContainer">
			<div id="uploaderOverlay" style="position:absolute; z-index:2"></div>
			<div id="selectFilesLink" style="z-index:1"><a id="selectLink" href="#">Select File</a></div>
		</div>
		<div id="uploadFilesLink"><a id="uploadLink" href="#">Upload File</a></div><br/>
		<div id="status" style="font-weight: bold; margin-bottom: 10px;">
		    Please select a file&hellip;
		</div>
		<div id="progressBarOuter" style="border: 2px solid #416ed7; background-color: white;">
		    <div id="progressBarInner" style="height: 18px; width: 0%; background-color: #416ed7;">
		        &nbsp;
		    </div>
		</div>
</div>
