view scripts are found in application/views/scripts/; the view script for 
the default controller and action is in 
application/views/scripts/index/index.phtml.

When determining the view script name and path, the views/scripts/ directory 
will be used as the base path, with a directories named after the individual 
controllers providing a hierarchy of view scripts.

The view script is what actually contains the display logic necessary to output 
the data prepared by your controller action and/or your model. The first thing 
the view will do upon render() is find the appropriate script. The view looks 
at the controller name, the action name and merges that with the location of 
the scripts to create a URI for the view script. For example, if you are calling 
the URL http://example.com/member/login, then it will combine the default location 
of the view scripts application/view/scripts, with the controller name, "member" 
and the action name "login" with the default extenstion ".phtml" to create the URI 
application/views/scripts/member/login.phtml. 

If you do not want to use the default view script, you can call render() manually
at any point and specify the script to call. An example would be:
$this->view_render('default.php');
The script default.php has to be located somewhere in one of your script paths, 
which brings us to our next point. If you are calling custom scripts, you need to
make sure you either put them in the directory where the view is going to look
for them, or you need to add your own custom directories into the script path. 
There are three methods that come into play here, getScriptPaths(), setScriptPath()
and addScriptPath. These three methods allow you to view and set where your view
looks for scripts.  