========================
| OpenFISMA Test Cases |
========================

============
Introduction
============
The OpenFISMA project has two types of tests built-in: functional tests written 
in Selenium/PHPUnit, and unit tests written in basic PHPUnit. Both types of test
are designed to be automated and executed frequently, while also providing
interactive feedback about the status of test results.

The unit tests are intended to test at a low level, ensuring that class
implementations provide proper output on a range of possible inputs, handling 
edge cases and outliers as specified in the design.

Functional tests operate at a higher level, ensuring that the application
enables users to perform their required functions. Using Selenium for this level
of testing enables testing at a very high level, simulating button clicks and
text entry and allowing test cases to quickly verify a very broad range of
functionality.

Put another way, unit tests verify correctness at a development level, while
functional tests verify correctness at a business level. Both types of test are
equally important for creating a high-quality product.

==================
Running Unit Tests
==================
PHPUnit test cases are stored under the /test directory (where this README is
located).

The entire test suite can be run easily using this command:

$ cd /path/to/project/test
$ phpunit AllTests.php

An individual test can be run by specifiying it directly:

$ cd /path/to/project/test/model
$ phpunit User.php

Note: in order to run all tests, you will need to have your Selenium-RC server
configured correctly. (See "Running Functional Tests" below.)

==================
Writing Unit Tests
==================
Basic unit tests should generally extend from the PHPUnit_Framework_TestCase
class -- if you're writing a Selenium test case then see the section below.

Unit tests simply need to be placed in a subdirectory of the /test directory,
and each unit test needs to be a single class per file, where the name of the
class matches the name of the file. Each method in the file which begins with
the word "test" is considered a separate test and will be executed in isolation.

This naming convention helps OpenFISMA automatically locate and run unit tests:

E.g.:
$ cat > /path/to/project/test/config/NewTest.php
require 'PHPUnit/Framework/TestCase.php';

class Test_Config_NewTest extends PHPUnit_Framework_TestCase {
    function testNew() {
        ; // do something!
    }
}

========================
Running Functional Tests
========================
In order to execute Selenium test cases, you will need to set up a Selenium RC
server. Once you have set up the server, then you need to edit the
/apps/config/selenium.conf file to let OpenFISMA know how to connect to your
Selenium RC server. Once this configuration is complete, the functional tests
can be executed just like any of the other PHPUnit tests.

========================
Writing Functional Tests
========================
Selenium test cases should extend from the Test_FismaSeleniumTest class. This
class sets up the connection to the Selenium RC server by reading the
selenium.conf file. Functional tests can then be written using PHP Selenese.
The structure of the files is otherwise identical to the basic unit tests -- see
the section above.

By convention, Selenium test cases are stored inside the /test/selenium
directory.

$ cat > /path/to/project/test/selenium/config/NewTest.php
class Test_Selenium_Config_NewTest extends Test_FismaSeleniumTest {
    function testNew() {
        ; // do something!
    }
}