<?php
/**
 * Copyright (c) 2011 Endeavor Systems, Inc.
 *
 * This file is part of OpenFISMA.
 *
 * OpenFISMA is free software: you can redistribute it and/or modify it under the terms of the GNU General Public 
 * License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * OpenFISMA is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied 
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more 
 * details.
 *
 * You should have received a copy of the GNU General Public License along with OpenFISMA.  If not, see 
 * {@link http://www.gnu.org/licenses/}.
 */

require_once(realpath(dirname(__FILE__) . '/../../FismaUnitTest.php'));

/**
 * Test_Application_Models_Vulnerability
 * 
 * @uses Test_FismaUnitTest
 * @package Test 
 * @copyright (c) Endeavor Systems, Inc. 2011 {@link http://www.endeavorsystems.com}
 * @author Josh Boyd <joshua.boyd@endeavorsystems.com> 
 * @license http://www.openfisma.org/content/license GPLv3
 */
class Test_Application_Models_Vulnerability extends Test_FismaUnitTest
{
    /**
     * testIsValidStateTransition 
     * 
     * @param mixed $expected 
     * @param mixed $fromState 
     * @param mixed $toState 
     * @access public
     * @return void
     * @dataProvider stateProvider
     */
    public function testIsValidStateTransition($expected, $fromState, $toState)
    {
        $vuln = new Vulnerability();

        $this->assertEquals($expected, $vuln->isValidStateTransition($fromState, $toState));
    }

    /**
     * testSetStatusInvalidTransition 
     * 
     * @access public
     * @return void
     * @expectedException Fisma_Zend_Exception
     */
    public function testSetStatusInvalidTransition()
    {
        $vuln = new Vulnerability();

        $vuln->status = 'test';
    }

    /**
     * testSetStatusFixed 
     * 
     * @access public
     * @return void
     */
    public function testSetStatusFixed()
    {
        $vuln = new Vulnerability();

        $vuln->status = 'FIXED';

        $this->assertTrue(Zend_Date::isDate($vuln->closedTs, Fisma_Date::FORMAT_DATETIME));
    }

    /**
     * testSetStatusOpen 
     * 
     * @access public
     * @return void
     */
    public function testSetStatusOpen()
    {
        $vuln = new Vulnerability();

        $vuln->status = 'FIXED';
        $vuln->status = 'OPEN';

        $this->assertNull($vuln->closedTs);
        $this->assertNull($vuln->resolutionId);
    }

    /**
     * stateProvider 
     * 
     * @static
     * @access public
     * @return void
     */
    public static function stateProvider()
    {
        return array(
            array('expected' => true, 'fromState' => 'FIXED', 'toState' => 'OPEN'),
            array('expected' => true, 'fromState' => 'WONTFIX', 'toState' => 'OPEN'),
            array('expected' => true, 'fromState' => 'OPEN', 'toState' => 'FIXED'),
            array('expected' => true, 'fromState' => 'OPEN', 'toState' => 'WONTFIX'),
            array('expected' => false, 'fromState' => 'OPEN', 'toState' => 'CLOSED')
        );
    }
}
