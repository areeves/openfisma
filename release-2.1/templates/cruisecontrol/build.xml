<?xml version="1.0" encoding="UTF-8"?>
<!--****************************************************************************
 * @author James Ford <james.t.ford@gmail.com>
 * @copyright 2007-2008 Endeavor Systems
 * @license   http://www.opensource.org/licenses/bsd-license.php  BSD License
 * @version   @package_version@
 * @link      http://www.openfisma.org/
 
 You will need to copy the build.xml file and the build.properties file to the root of the
 project directory in cruisecontrol. You should edit the build.properties file and the name
 of the project in the build.xml file depending on your needs. You should also run the init
 script to automatically create the project directory structure. This is done by calling
 ant from the command line in the directory with the build.xml file and build.properties
 file and specifying init as the target.
 
 Example: ../../apache-ant-1.7.0/bin/ant init
 ****************************************************************************-->
<project name="openfisma-release-2.0" default="build" basedir=".">

<!-- Loads the build.properties file -->
<property file="build.properties" />

	<!--
	The default build target for this project. It simply depends on all sub tasks
	that perform the project build. The sub targets are executed in the listed 
	order.
  
	1. 'clean' Clean old project build artifacts
	2. 'checkout' Update project working copy
	3. 'php-documentor' Generate api documentation
	4. 'php-codesniffer' Check for coding violations.
	5. 'phpunit' Execute unit tests, generate metrics, coverage etc. 
	-->
	<target name="build" 
			depends="clean,checkout,svninfo,php-documentor,php-codesniffer,phpunit,compatibility,package,deploy-phpdocs,deploy-dev1" />
			
<!-- 
depends="clean,checkout,svninfo,php-documentor,php-codesniffer,phpunit,compatibility,package,deploy-phpdocs,deploy-dev1"
-->

	<!-- Files to be included in application package -->
    <fileset dir="${basedir}/source" id="package.files">
        <include name="apps/**" />
        <include name="public/**" />
        <include name="include/**" />
        <include name="vendor/**" />
		<include name="log/**" />
        <include name="index.html" />
        <include name="paths.php" />
        <include name="INSTALL" />
        <include name="README" />
        <include name="CHANGELOG" />
        <include name="LICENSE" />
        <exclude name="**/.svn/**" />
    </fileset>
	
	<!-- Files to be included in application package, includes test data -->
    <fileset dir="${basedir}/source" id="testpackage.files">
        <include name="apps/**" />
        <include name="public/**" />
        <include name="include/**" />
        <include name="vendor/**" />
		<include name="log/**" />
		<include name="test/**" />
        <include name="index.html" />
        <include name="paths.php" />
        <include name="INSTALL" />
        <include name="README" />
        <include name="CHANGELOG" />
        <include name="LICENSE" />
        <exclude name="**/.svn/**" />
    </fileset>	

	<!--
	Helper target that initializes the CruiseControl project and creates the base 
	directory structure. 
	-->
	<target name="init">
		<!-- Create the source directory -->
		<mkdir dir="source" />
		<!-- Create the different build directories -->
		<mkdir dir="build/logs" />
		<!-- Create the api directory to store the phpdocs generated by phpdocumentor for phpundercontrol -->
		<mkdir dir="build/api" />
		<!-- Create the phpdocs directory to store the phpdocs generated using the phpedit format -->
		<mkdir dir="build/phpdocs" />
		<!-- -->
		<mkdir dir="build/coverage" />
		<!-- Create the artifacts directory to store items that cruisecontrol will publish for each build -->
		<mkdir dir="build/artifacts" />
		<!-- Checkout source code from branch in build.properties to the local source directory -->
		<exec executable="svn">
			<arg line="co ${svnroot}/${svnbranch} source" />
		</exec>
	</target>
    
	<!--
	The clean target is used to remove build artifacts of previous builds. Otherwise
	CruiseControl will present old, maybe successful result, even if your build 
	process fails.
	-->
	<target name="clean">
		<!-- Remove old log files -->
		<delete includeemptydirs="true" failonerror="false">
			<fileset dir="${basedir}/build/logs" includes="**/*" />
		</delete>
		<!-- Remove old api documentation -->
		<delete includeemptydirs="true" failonerror="false">
			<fileset dir="${basedir}/build/api" includes="**/*" />
		</delete>
		<!-- Remove old coverage report -->
		<delete includeemptydirs="true" failonerror="false">
			<fileset dir="${basedir}/build/coverage" includes="**/*" />
		</delete>
		<!-- Remove old artifacts -->
		<delete includeemptydirs="true" failonerror="false">
			<fileset dir="${basedir}/build/artifacts" includes="**/*" />
		</delete>
		<!-- Remove old phpdocs -->
		<delete includeemptydirs="true" failonerror="false">
			<fileset dir="${basedir}/build/phpdocs" includes="**/*" />
		</delete>			
	</target>

	<!-- Performs an 'svn up' for the working copy.-->
	<target name="checkout">
		<exec executable="svn" dir="${basedir}/source">
			<arg line="up" />
		</exec>
	</target>
	
	<!-- Saves svn info output to svn.properties file so the revision number can be pulled later-->
	<target name="svninfo">
		<exec executable="svn" dir="${basedir}/source" output="${basedir}/svn.properties">
			<arg line="info" />
		</exec>
	</target>

	<!--
	Generates the project documentation into the <project>/build/api directory.
	phpUnderControl uses the command line output of PhpDocumentor that is logged
	by CruiseControl.
	-->
	<target name="php-documentor">
		<exec executable="phpdoc" dir="${basedir}/source">
			<arg line="-ct type -ue on -t ${basedir}/build/api 
						-tb /usr/share/php/data/phpUnderControl/data/phpdoc -o HTML:Phpuc:phpuc
						-d ${basedir}/source/apps"/>
		</exec>
		<!-- Generate phpdoc files in phpedit format for publishing to api server -->
		<exec executable="phpdoc" dir="${basedir}/source">
			<arg line="--undocumentedelements on 
						--target ${basedir}/build/phpdocs 
						--output HTML:frames:phpedit
						--title OpenFISMA API Documentation
						--sourcecode on
						--directory ${basedir}/source/apps
						-ric README,INSTALL,CHANGELOG,LICENSE"/>
		</exec>
		<!-- Copy phpdoc error report to artifacts directory -->
		<copy file="${basedir}/build/phpdocs/errors.html" tofile="${basedir}/build/artifacts/PHPdoc_Error_Report.html"/>
	</target>

	<!--
	Execute code sniffer. This demo uses the PEAR standard the is bundled with
	PHP_CodeSniffer, but phpUnderControl doesn't follow this standard. CodeSniffer
	uses the Checkstyle report generator that is supported by CruiseControl. The
	'output' attribute for the exec element pipes the command line output into the 
	<project>/build/logs/checkstyle.xml file.
  
	You should always declare the optional @error attribute for the codesniffer 
	task. Otherwise all errors will be logged in the checkstyle.xml file, which
	results in an invalid xml document.
	-->
	<target name="php-codesniffer">
		<exec executable="phpcs" 
			dir="${basedir}/source/apps" 
			error="/dev/null"
			output="${basedir}/build/logs/checkstyle.xml">
			<arg line="--report=checkstyle 
					--standard=Zend
					${basedir}/source/apps"/>
		</exec>
	</target>
  
	<!--
	Executes the project unit tests and stores the different logs in the 
	<project>/build/logs directory. Furthermore it generates the coverage report
	under <project>/build/coverage.
	-->
	<target name="phpunit">
		<exec executable="phpunit" dir="${basedir}/source" failonerror="on">
		<arg line="--log-xml ${basedir}/build/logs/phpunit.xml 
                 --log-pmd ${basedir}/build/logs/phpunit.pmd.xml  
                 --log-metrics ${basedir}/build/logs/phpunit.metrics.xml 
                 --coverage-xml  ${basedir}/build/logs/phpunit.coverage.xml 
                 --coverage-html ${basedir}/build/coverage
                 phpucAllTests tests/AllTests.php" />
		</exec>
	</target>
	
	<!-- Runs the PHP_CompatibilityInfo command to check which version of PHP will be required to run the application -->
	<target name="compatibility">
		<exec executable="pci" dir="${basedir}/source" output="${basedir}/build/artifacts/PHP_Compatibility_Report.txt">
			<arg line="--summarize --dir ${basedir}/source" />
		</exec>
    </target>

	
	<!-- Package binary distributions of application in multiple formats -->
	<target name="package">
		<!-- Load svn.properties file to retrieve revision number -->
		<property file="svn.properties" />
		<!-- Create zip file of package files without test cases -->
		<zip destfile="${basedir}/build/artifacts/${packagename}.${Revision}.zip">
			<fileset refid="package.files"/>
		</zip>
		<!-- Create zip file of package files with test cases -->
		<zip destfile="${basedir}/build/artifacts/${packagename}.test.${Revision}.zip">
			<fileset refid="testpackage.files"/>
		</zip>		
		<!-- Create tar file of package files without test cases -->
		<tar destfile="${basedir}/build/artifacts/${packagename}.${Revision}.tar.gz" compression="gzip">
			<fileset refid="package.files"/>
		</tar>
		<!-- Create tar file of package files with test cases -->
		<tar destfile="${basedir}/build/artifacts/${packagename}.test.${Revision}.tar.gz" compression="gzip">
			<fileset refid="testpackage.files"/>
		</tar>	
	</target>
	
	<!-- Deployes new phpdoc files to api.openfisma.org webserver -->
	<target name="deploy-phpdocs">
		<!-- Remove old log files -->
		<delete includeemptydirs="true" failonerror="false">
			<fileset dir="/var/www/api" includes="**/*" />
		</delete>
		<!-- Copy phpdoc error report to artifacts directory -->
		<copy todir="/var/www/api">
			<fileset dir="${basedir}/build/phpdocs" includes="**/*" />
		</copy>
	</target>	
	
	<!-- Deployes new phpdoc files to api.openfisma.org webserver -->
	<target name="deploy-dev1">
		<!-- Load svn.properties file to retrieve revision number -->
		<property file="svn.properties" />
		<!-- Remove old files and web directory -->
		<delete dir="/var/www/dev1"/>
		<!-- Create new web directory -->
		<mkdir dir="/var/www/dev1" />
		<!-- Deploy test package to dev0 webserver -->
		<unzip src="${basedir}/build/artifacts/${packagename}.test.${Revision}.zip" dest="/var/www/dev1"/>
		<!-- Chmod files and directories on dev0 webserver -->
		<chmod perm="777" type="both" >
			<fileset dir="/var/www/dev1" >
				<include name="log" />
				<include name="public/temp" />
				<include name="public/evidence" />
				<include name="apps/config/install.conf" />
			</fileset>
		</chmod>
		<!-- symlink test directory to allow test files to run -->
		<exec executable="ln" dir="/var/www/dev1/public">
			<arg line="-s ../test test" />
		</exec>		
		<!-- Drop current database -->
		<exec executable="mysql" dir="/var/www/dev1/public">
			<arg line="--user=${database.username} 
					--password=${database.password} 
					--host=${database.host}
					--port=${database.port}
					--execute='drop database ${database.name}'" />
		</exec>
	</target>		
</project>